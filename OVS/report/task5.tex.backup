\section*{Task 5}
As a first guideline we would suggest to write enough assert statements, whenever a pointer is dereferenced and before freeing, but also to verify the correctness of code segments. When using \texttt{cbmc} for writing safe C code, it is a good practice to use a custom \texttt{malloc} instrumentation to also test the program when the memory allocation fails. The use of a counter variable to count the number of \texttt{malloc}s and \texttt{free}s also detects memory leaks. It is recommended to test the code regularly during the development phase, since memory leaks are very common in C programs and very hard to find. 
%Checking for memory leaks should be done regularly, since, as we experienced it, they can arise very easily in C-code (and can often be hard to find).

The counterexamples given by \texttt{cbmc} are somewhat difficult to interpret but when analyzed carefully they provide good insight in somewhat subtle bugs (as we experienced personally for memory leaks in the address book application). Memory leaks can be spotted by examining the trace of the counterexample by searching memory (de)allocations that aren't followed by a changing counter.



