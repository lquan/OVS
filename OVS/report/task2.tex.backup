\section*{Task 2}

The stack of integers uses a singly linked list based on the following data structure:
\begin{lstlisting}
// forward declaration of struct and typedef
typedef struct node Node;

// Linked list data structure
struct node {
    int data;
    Node* next;
};
\end{lstlisting}

Our test harness consists of a \texttt{main} which simply initializes a empty stack, pushes a large number of integers (value $i$ in the $i$th iteration) and then popping until the stack is empty. We first tested the program using some \texttt{printf} statements for 1024 elements by running it manually. 

\begin{lstlisting}
int main()
{
    Node* stack = NULL; //initialize stack
    
    int i;
    for (i=0; i < NB_ELEMENTS; ++i) {
        #ifndef __VERIFY 
        printf("pushed: %d\n", i);
        #endif
        push(&stack, i);
    }

    int popped;
    while( stack ) {
        popped = pop(&stack);
        #ifndef __VERIFY 
        printf("popped: %d\n", popped);
        assert( popped >= 0 && popped < NB_ELEMENTS);
        #endif
    }
    
    #ifdef __VERIFY
    assert(counter==0);
    #endif
    return 0;
}
\end{lstlisting}


To check the program for the absence for \texttt{NULL} pointer dereferences, buffer overflows and pointer-safety errors using \texttt{cbmc}, we then again instrumented the \texttt{malloc} function (as in Task~1) and ran the program with the \texttt{pointer-check} and \texttt{bounds-check} options (first separately, then together). We also added a counter for keeping track of the number of \texttt{malloc}s minus \texttt{free}s to check for memory leaks by putting a \texttt{assert} statement at the end that this number is zero.


Verification must be done using (trivial) loop-bounds because the while loop in the main function has no (useful) run-time bound. Thus,
the \verb|--unwind| parameter has to be used in order to prevent infinite unwinding.
We then tried to verify the test harness using \texttt{cbmc} for many elements ($n > 1000$), the verification step took too long to complete (this is a manifestation of the state explosion problem caused by the fact that when creating an element, it can have either a successful or failed \texttt{malloc} operation, which results in $2^n$ possible paths). A couple of computation times are shown: it is clear that \texttt{cbmc} does not scale well for a large number of elements in this program.
\input{times.tex}

Any combinations with \verb|--bounds-check| and/or \verb|--pointer-check| also verifies successfully, e.g., for $n=8$, verifications succeeds in $1.6$\,s.
\begin{verbatim}
cbmc -D __VERIFY --unwind 9 stack_int.c --pointer-check --bounds-check
\end{verbatim}
When using smaller loop bounds, \texttt{cbmc} obviously reports unwinding assertion errors.

